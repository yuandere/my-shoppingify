generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = "postgres://postgres.plonmhpwdcpkxuymfnex:vQaodiqfi1XkMmfn@aws-0-us-west-1.pooler.supabase.com:5432/postgres"
}

model Account {
  id                String   @id(map: "account_pkey") @default(dbgenerated("gen_random_uuid_v7()")) @db.VarChar
  type              String   @db.VarChar
  createdAt         DateTime @default(now()) @db.Timestamptz(6)
  updatedAt         DateTime @default(now()) @db.Timestamptz(6)
  provider          String   @db.VarChar
  providerAccountId String   @db.VarChar
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?  @db.VarChar
  scope             String?  @db.VarChar
  id_token          String?
  session_state     String?  @db.VarChar
  userId            String   @db.VarChar
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "public_Account_userId_fkey")
}

model Category {
  name    String @db.VarChar
  ownerId String @db.VarChar
  id      String @id @default(dbgenerated("gen_random_uuid_v7()")) @db.VarChar
  User    User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "public_categories_owner_id_fkey")
  Item    Item[]
}

model Item {
  name         String     @db.VarChar
  imageUrl     String?    @db.VarChar
  description  String?    @db.VarChar
  ownerId      String     @db.VarChar
  categoryName String?    @db.VarChar
  id           String     @id @default(dbgenerated("gen_random_uuid_v7()")) @db.VarChar
  categoryId   String?    @db.VarChar
  Category     Category?  @relation(fields: [categoryId], references: [id], map: "public_item_categoryId_fkey")
  User         User       @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "public_Item_ownerId_fkey")
  ListItem     ListItem[]
}

model List {
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @default(now()) @db.Timestamptz(6)
  ownerId   String     @db.VarChar
  name      String     @db.VarChar
  completed Boolean    @default(false)
  id        String     @id @default(dbgenerated("gen_random_uuid_v7()")) @db.VarChar
  User      User       @relation(fields: [ownerId], references: [id], onDelete: Cascade, map: "public_lists_owner_id_fkey")
  ListItem  ListItem[]
}

model ListItem {
  categoryName String? @db.VarChar
  name         String  @db.VarChar
  checked      Boolean @default(false)
  quantity     Int     @default(1) @db.SmallInt
  id           String  @id @default(dbgenerated("gen_random_uuid_v7()")) @db.VarChar
  itemId       String  @db.VarChar
  listId       String  @db.VarChar
  Item         Item    @relation(fields: [itemId], references: [id], onDelete: Cascade, map: "public_ListItem_itemId_fkey")
  List         List    @relation(fields: [listId], references: [id], onDelete: Cascade, map: "public_ListItem_listId_fkey")
}

model Session {
  sessionToken String
  userId       String   @db.VarChar
  expires      DateTime @db.Timestamptz(6)
  id           String   @default(dbgenerated("gen_random_uuid_v7()")) @db.VarChar
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "public_sessions_userId_fkey")

  @@id([sessionToken, id])
}

model User {
  id            String     @id(map: "users_pkey") @default(dbgenerated("gen_random_uuid_v7()")) @db.VarChar
  createdAt     DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime   @default(now()) @db.Timestamptz(6)
  name          String?    @db.VarChar
  email         String?    @unique(map: "users_email_key") @db.VarChar
  emailVerified DateTime?  @db.Timestamptz(6)
  image         String?    @db.VarChar
  Account       Account[]
  Category      Category[]
  Item          Item[]
  List          List[]
  Session       Session[]
}

model VerificationToken {
  identifier String   @db.VarChar
  token      String
  expires    DateTime @db.Timestamptz(6)

  @@id([identifier, token], map: "verification_tokens_pkey")
}

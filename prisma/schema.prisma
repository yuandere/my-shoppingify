// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  lists         List[]    @relation

  @@map(name: "users")
}

model List {
  id        String     @id @default(cuid())
  name      String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime   @default(now()) @map(name: "updated_at")
  ownerId   String
  owner     User       @relation(fields: [ownerId], references: [id])
  items     ListItem[]

  @@index([ownerId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(255)
  items Item[]

  @@map(name: "categories")
}

model Item {
  id         String     @id @default(cuid())
  name       String     @db.VarChar(32)
  imageUrl   String?
  categoryId Int?
  category   Category?  @relation(fields: [categoryId], references: [id])
  ListItem   ListItem[]

  @@index([categoryId])
}

model ListItem {
  id       String  @id @default(cuid())
  itemId   String
  item     Item    @relation(fields: [itemId], references: [id])
  ListId   String
  List     List    @relation(fields: [ListId], references: [id])
  checked  Boolean @default(false)
  quantity Int

  @@index([itemId, ListId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}
